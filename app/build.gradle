def isCI = hasProperty("isCI")
def isLightCI = hasProperty("isLightCI")
def includeFirebase = isCI || hasProperty("firebase") || true

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'de.mobilej.unmock'
apply plugin: 'org.jetbrains.kotlin.android.extensions'
apply plugin: "com.jaredsburrows.license"

android {
    compileSdkVersion 28

    defaultConfig {
        applicationId "org.walleth"

        minSdkVersion 15
        targetSdkVersion 28

        versionCode 427
        versionName "0.42.7"
        archivesBaseName = "WALLETH-$versionName"

        testInstrumentationRunner "org.walleth.infrastructure.AppReplacingRunner"
        vectorDrawables.useSupportLibrary = true

        buildConfigField "String", "ETHERSCAN_APIKEY", '"' + file('../.ci/etherscan.apikey').text + '"'

        multiDexEnabled true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        warning 'InvalidPackage' // for OKIO
        warning 'MissingTranslation'
    }

    flavorDimensions "geth", "fire", "store", "connectivity"

    productFlavors {
        withGeth {
            dimension "geth"
        }

        noGeth {
            dimension "geth"
        }

        forFDroid {
            dimension "store"
            buildConfigField 'String', 'STORE', '"fdroid"'
        }

        forAmazon {
            dimension "store"
            buildConfigField 'String', 'STORE', '"amazon"'
        }

        forPlay {
            dimension "store"
            buildConfigField 'String', 'STORE', '"play"'
        }

        if (includeFirebase) {
            withFirebase {
                dimension "fire"
            }
        }

        noFirebase {
            dimension "fire"
        }

        online {
            dimension "connectivity"
        }

        offline {
            dimension "connectivity"
            applicationIdSuffix ".offline"
        }

    }

    applicationVariants.all { variant ->
        variant.resValue "string", "package_name", "${variant.properties.applicationId}"
    }

    android.variantFilter { variant ->
        def geth = variant.getFlavors().get(0).name
        def firebase = variant.getFlavors().get(1).name
        def store = variant.getFlavors().get(2).name
        def connectivity = variant.getFlavors().get(3).name

        if ((project.hasProperty("singleFlavor") && (store != 'forFDroid'))
                || ((store == 'forAmazon' || store == 'forPlay') && firebase == 'noFirebase')
                || (store == 'forFDroid' && firebase != 'noFirebase')
                || (connectivity == 'offline' && (firebase == 'withFirebase' || geth == 'withGeth'))) {
            variant.setIgnore(true)
        }
    }

    // Ensure the no-op dependency is always used in JVM tests.
    configurations.all { config ->
        if (config.name.contains('UnitTest') || config.name.contains('AndroidTest')) {
            config.resolutionStrategy.eachDependency { details ->
                if (details.requested.group == 'com.squareup.leakcanary' && details.requested.name == 'leakcanary-android') {
                    details.useTarget(group: details.requested.group, name: 'leakcanary-android-no-op', version: details.requested.version)
                }
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/main.kotlin_module'
    }

}

dependencies {
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.0.1"
    implementation "com.android.support:multidex:$multidex_version"
    androidTestImplementation "com.android.support:multidex:$multidex_version"
    androidTestImplementation "com.android.support:multidex-instrumentation:$multidex_version"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    withGethImplementation "org.ethereum:geth:1.8.8"

    implementation "com.github.walleth.kethereum:functions:$kethereum_version"
    implementation "com.github.walleth.kethereum:bip39:$kethereum_version"
    implementation "com.github.walleth.kethereum:bip39_wordlist_en:$kethereum_version"
    implementation "com.github.walleth.kethereum:bip44:$kethereum_version"
    implementation "com.github.walleth.kethereum:erc55:$kethereum_version"
    implementation "com.github.walleth.kethereum:eip155:$kethereum_version"
    implementation "com.github.walleth.kethereum:erc681:$kethereum_version"
    implementation "com.github.walleth.kethereum:erc831:$kethereum_version"
    implementation "com.github.walleth.kethereum:erc1328:$kethereum_version"
    implementation "com.github.walleth.kethereum:keccak_shortcut:$kethereum_version"
    implementation "com.github.walleth.kethereum:method_signatures:$kethereum_version"
    implementation "com.github.walleth.kethereum:networks:$kethereum_version"
    implementation "com.github.walleth.kethereum:etherscan:$kethereum_version"
    implementation "com.github.walleth.kethereum:rlp:$kethereum_version"
    implementation "com.github.walleth.kethereum:wallet:$kethereum_version"
    implementation "com.github.walleth.kethereum:contract_abi_types:$kethereum_version"

    implementation 'com.dmitrymalkovich.android:progress-fab:1.6'

    implementation 'com.github.amlcurran.showcaseview:library:5.4.3'

    implementation 'com.github.ligi:tracedroid:1.4'
    implementation 'com.github.ligi:KAXT:0.20'
    implementation 'com.github.ligi:KAXTUI:0.6'
    implementation 'com.github.ligi:thirdpartylicensedisplay:0.2'

    implementation('com.github.trezor.trezor-android:trezor-lib:v2.0.1') {
        exclude group: 'com.android.support'
    }

    implementation 'com.github.kenglxn.QRGen:android:2.5.0'
    implementation 'com.google.zxing:core:3.3.3'

    implementation 'com.jakewharton:process-phoenix:2.0.0'

    implementation 'com.jakewharton.threetenabp:threetenabp:1.1.1'
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'

    implementation "org.koin:koin-android:1.0.2"

    implementation "com.android.support:support-v4:$support_version"
    implementation "com.android.support:appcompat-v7:$support_version"
    implementation "com.android.support:design:$support_version"
    implementation "com.android.support:cardview-v7:$support_version"
    implementation "com.android.support:recyclerview-v7:$support_version"
    implementation "com.android.support:preference-v14:$support_version"

    implementation "com.chibatching.kotpref:kotpref:2.6.0"

    implementation 'com.squareup.moshi:moshi:1.8.0'

    implementation 'com.github.ligi:ExtraCompats:0.4'
    implementation 'com.github.ligi:KRoom:0.4'

    implementation 'com.github.ligi:rootbeer:remove_native_workaround'

    implementation "android.arch.lifecycle:extensions:$arch_version"

    implementation 'com.github.madrapps:pikolo:1.1.8'

    implementation "android.arch.persistence.room:runtime:$room_version"
    kapt "android.arch.persistence.room:compiler:$room_version"

    kapt "android.arch.lifecycle:compiler:$arch_version"

    androidTestImplementation "com.google.truth:truth:$truth"

    testImplementation "org.mockito:mockito-core:$mockito_version"

    androidTestImplementation "org.mockito:mockito-core:$mockito_version"

    androidTestImplementation 'com.linkedin.dexmaker:dexmaker-mockito:2.19.1'

    androidTestImplementation 'com.android.support.test.espresso:espresso-contrib:3.0.2'
    androidTestImplementation 'com.github.ligi:trulesk:0.26'

    testImplementation 'junit:junit:4.12'
    testImplementation "com.google.truth:truth:$truth"
    testImplementation 'org.threeten:threetenbp:1.3.8'

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.2'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.2'

    if (includeFirebase) {
        withFirebaseImplementation "com.google.firebase:firebase-core:15.0.2"
        withFirebaseImplementation "com.google.firebase:firebase-crash:15.0.2"
        withFirebaseImplementation "com.google.firebase:firebase-messaging:15.0.2"
    }
}

if (isCI || isLightCI) {

    apply plugin: 'composer'
    composer {
        apkInstallTimeout 600
    }
    apply plugin: 'witness'
    apply from: 'witness.gradle'
}
if (includeFirebase) {
    apply plugin: 'com.google.gms.google-services'
}

apply plugin: 'com.github.ben-manes.versions'