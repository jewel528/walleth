def isCI = hasProperty("isCI")
def includeFirebase = isCI || hasProperty("firebase")

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'de.mobilej.unmock'
apply plugin: 'org.jetbrains.kotlin.android.extensions'

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.3"

    defaultConfig {
        applicationId "org.walleth"

        minSdkVersion 15
        targetSdkVersion 27

        versionCode 35
        versionName "0.35"
        archivesBaseName = "WALLETH-$versionName"

        testInstrumentationRunner "org.walleth.infrastructure.AppReplacingRunner"
        vectorDrawables.useSupportLibrary = true

        buildConfigField "String", "ETHERSCAN_APIKEY", '"' + file('../.ci/etherscan.apikey').text + '"'

        multiDexEnabled true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        warning 'InvalidPackage' // for OKIO
        warning 'MissingTranslation'
    }

    flavorDimensions "geth", "fire", "store"

    productFlavors {
        withGeth {
            dimension "geth"
        }

        noGeth {
            dimension "geth"
        }

        forFDroid {
            dimension "store"
            buildConfigField 'String', 'STORE', '"fdroid"'
        }

        forAmazon {
            dimension "store"
            buildConfigField 'String', 'STORE', '"amazon"'
        }

        forPlay {
            dimension "store"
            buildConfigField 'String', 'STORE', '"play"'
        }

        if (includeFirebase) {
            withFirebase {
                dimension "fire"
            }
        }

        noFirebase {
            dimension "fire"
        }

    }


    android.variantFilter { variant ->
        def geth = variant.getFlavors().get(0).name
        def firebase = variant.getFlavors().get(1).name
        def store = variant.getFlavors().get(2).name


        if ((project.hasProperty("singleFlavor") && (store != 'forPlay'))
                || ((geth == 'noGeth') && project.hasProperty("isCI"))
                || ((store == 'forAmazon' || store == 'forPlay') && firebase == 'noFirebase')
                || (store == 'forFDroid' && firebase != 'noFirebase')) {
            variant.setIgnore(true)
        }
    }

    // Ensure the no-op dependency is always used in JVM tests.
    configurations.all { config ->
        if (config.name.contains('UnitTest') || config.name.contains('AndroidTest')) {
            config.resolutionStrategy.eachDependency { details ->
                if (details.requested.group == 'com.squareup.leakcanary' && details.requested.name == 'leakcanary-android') {
                    details.useTarget(group: details.requested.group, name: 'leakcanary-android-no-op', version: details.requested.version)
                }
            }
        }
    }

}

dependencies {
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-android:0.22.5"
    compile "com.android.support:multidex:$multidex_version"
    androidTestCompile "com.android.support:multidex:$multidex_version"
    androidTestCompile "com.android.support:multidex-instrumentation:$multidex_version"

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    withGethCompile "org.ethereum:geth:1.8.2"

    compile "com.github.walleth.kethereum:functions:$kethereum_version"
    compile "com.github.walleth.kethereum:bip44:$kethereum_version"
    compile "com.github.walleth.kethereum:erc55:$kethereum_version"
    compile "com.github.walleth.kethereum:eip155:$kethereum_version"
    compile "com.github.walleth.kethereum:erc681:$kethereum_version"
    compile "com.github.walleth.kethereum:keccak_shortcut:$kethereum_version"
    compile "com.github.walleth.kethereum:method_signatures:$kethereum_version"
    compile "com.github.walleth.kethereum:rlp:$kethereum_version"
    compile "com.github.walleth.kethereum:contract_abi_types:$kethereum_version"

    compile 'com.github.amlcurran.showcaseview:library:5.4.3'

    compile 'com.github.ligi:tracedroid:1.4'
    compile 'com.github.ligi:KAXT:0.20'
    compile 'com.github.ligi:KAXTUI:0.4'

    compile ('com.github.trezor.trezor-android:trezor-lib:v2.0.1')  {
        exclude group: 'com.android.support'
    }

    compile 'com.github.kenglxn.QRGen:android:2.4.0'
    compile 'com.google.zxing:core:3.3.2'

    compile 'com.jakewharton:process-phoenix:2.0.0'

    compile 'com.jakewharton.threetenabp:threetenabp:1.0.5'
    compile 'com.squareup.okhttp3:okhttp:3.10.0'

    compile "org.kodein.di:kodein-di-generic-jvm:5.0.0"
    compile "org.kodein.di:kodein-di-framework-android:5.0.0"

    compile "com.android.support:appcompat-v7:$support_version"
    compile "com.android.support:design:$support_version"
    compile "com.android.support:cardview-v7:$support_version"
    compile "com.android.support:recyclerview-v7:$support_version"
    compile "com.android.support:preference-v14:$support_version"

    compile "com.chibatching.kotpref:kotpref:2.5.0"

    compile 'com.squareup.moshi:moshi:1.5.0'
    compile 'com.github.ligi:ExtraCompats:0.4'
    compile 'com.github.ligi:KRoom:0.4'

    compile "android.arch.lifecycle:extensions:$arch_version"

    compile "android.arch.persistence.room:runtime:$room_version"
    kapt "android.arch.persistence.room:compiler:$room_version"

    kapt "android.arch.lifecycle:compiler:$arch_version"

    androidTestCompile "com.google.truth:truth:$truth"

    testCompile "org.mockito:mockito-core:2.18.0"

    androidTestCompile "org.mockito:mockito-core:2.18.0"
    androidTestCompile 'com.linkedin.dexmaker:dexmaker-mockito:2.16.0'

    androidTestCompile 'com.android.support.test.espresso:espresso-contrib:3.0.1'
    androidTestCompile 'com.github.ligi:trulesk:0.22'

    testCompile 'junit:junit:4.12'
    testCompile "com.google.truth:truth:$truth"
    testCompile 'org.threeten:threetenbp:1.3.6'

    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5.4'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'

    if (includeFirebase) {
        withFirebaseCompile "com.google.firebase:firebase-core:$firebase_version"
        withFirebaseCompile "com.google.firebase:firebase-crash:$firebase_version"
        withFirebaseCompile "com.google.firebase:firebase-messaging:$firebase_version"
    }
}

if (hasProperty("isCI")) {

    apply plugin: 'composer'

    apply plugin: 'witness'

    dependencyVerification {
        verify = [
                'com.github.ligi:tracedroid:7166d047a3622676357645414751d911b0e507e78d0a9102e38b7500a44fda8b',
                'com.jakewharton:process-phoenix:229c481a90067878d9b0bceee54600fe2ea48a771c6ff1fb47f0d865cf660844',
                'com.jakewharton.threetenabp:threetenabp:44b81823de861287f666c92a61c9e55259350f5bff588fec7819027a0291ddbf',
                'com.squareup.moshi:moshi:91e9c49dc282f1e22570ad3cff7178b00a22180749c8427083ec9be2322c064e',
                'com.github.ligi:ExtraCompats:3e4315f0f3b35e6e6dd5f37494480fd7ceaa09546c4361c7e7ff5b8563c936e0',
                'org.jetbrains:annotations:ace2a10dc8e2d5fd34925ecac03e4988b2c0f851650c94b8cef49ba1bd111478',
                'com.jakewharton.timber:timber:d553d3d3e883ce7d061f1b21b95d6ee0840f3bfbf6d3bd51c5671f0b0f0b0091',
                'org.threeten:threetenbp:dfb095d318c266673f6db2c89648fa73995343a2f2705e68ab2c63c99035f102'
        ]
    }

}
if (includeFirebase) {
    apply plugin: 'com.google.gms.google-services'
}

apply plugin: 'com.github.ben-manes.versions'

kotlin {
    experimental {
        coroutines "enable"
    }
}
androidExtensions {
    experimental = true
}